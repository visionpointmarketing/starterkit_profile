<?php
/**
 * Implement hook_install().
 *
 * Perform actions to set up the site for this profile.
 */
function starterkit_install() {
  // Add text formats.
  $filtered_html_format = array(
    'format' => 'filtered_html',
    'name' => 'Filtered HTML',
    'weight' => 0,
    'filters' => array(
      
      // URL filter.
      'filter_url' => array(
        'weight' => 0,
        'status' => 1,
      ),
      
      // HTML filter.
      'filter_html' => array(
        'weight' => 1,
        'status' => 1,
      ),
      
      // Line break filter.
      'filter_autop' => array(
        'weight' => 2,
        'status' => 1,
      ),
      
      // HTML corrector filter.
      'filter_htmlcorrector' => array(
        'weight' => 10,
        'status' => 1,
      ),
    ),
  );
  $filtered_html_format = (object) $filtered_html_format;
  filter_format_save($filtered_html_format);

  $full_html_format = array(
    'format' => 'full_html',
    'name' => 'Full HTML',
    'weight' => 1,
    'filters' => array(
      
      // URL filter.
      'filter_url' => array(
        'weight' => 0,
        'status' => 1,
      ),
      
      // Line break filter.
      'filter_autop' => array(
        'weight' => 1,
        'status' => 1,
      ),
      
      // HTML corrector filter.
      'filter_htmlcorrector' => array(
        'weight' => 10,
        'status' => 1,
      ),
    ),
  );
  $full_html_format = (object) $full_html_format;
  filter_format_save($full_html_format);

  $starterkit_themes= array(
    'omega',
    'theme_default' => 'starterkit',
    'admin_theme' => 'adminimal',
  );
  theme_enable($starterkit_themes);

  foreach ($starterkit_themes as $var => $theme) {
    if (!is_numeric($var)) {
      variable_set($var, $theme);
    }
  }
// Disable the default Bartik theme
  theme_disable(array('bartik'));

  // Enable some standard blocks.
  $default_theme = variable_get('theme_default', 'omega');
  $admin_theme = 'adminimal';
  $blocks = array(
    array(
      'module' => 'user',
      'delta' => 'login',
      'theme' => $admin_theme,
      'status' => 1,
      'weight' => 10,
      'region' => 'content',
      'pages' => '',
      'cache' => -1,
    ),
  );
  $query = db_insert('block')->fields(array('module', 'delta', 'theme', 'status', 'weight', 'region', 'pages', 'cache'));
  foreach ($blocks as $block) {
    $query->values($block);
  }
  $query->execute();


  // Create page types.

  // Insert default pre-defined node types into the database. For a complete
  // list of available node type attributes, refer to the node type API
  // documentation at: http://api.drupal.org/api/HEAD/function/hook_node_info.

  $types = array(
    array(
      'type' => 'page',
      'name' => st('Page'),
      'base' => 'node_content',
      'description' => st("Use <em>basic pages</em> for your static content, such as an 'About us' page."),
      'custom' => 1,
      'modified' => 1,
      'locked' => 0,
    ),
    array(
      'type' => 'news',
      'name' => st('News'),
      'base' => 'node_content',
      'description' => st('Use <em>News</em> for time-sensitive content.'),
      'custom' => 1,
      'modified' => 1,
      'locked' => 0,
    ),
  );

  foreach ($types as $type) {
    $type = node_type_set_defaults($type);
    node_type_save($type);
    node_add_body_field($type);
  }

  // Insert default pre-defined RDF mapping into the database.
  $rdf_mappings = array(
    array(
      'type' => 'node',
      'bundle' => 'page',
      'mapping' => array(
        'rdftype' => array('foaf:Document'),
      ),
    ),
    array(
      'type' => 'node',
      'bundle' => 'news',
      'mapping' => array(
        'field_image' => array(
          'predicates' => array('og:image', 'rdfs:seeAlso'),
          'type' => 'rel',
        ),
        'field_tags' => array(
          'predicates' => array('dc:subject'),
          'type' => 'rel',
        ),
      ),
    ),
  );
  foreach ($rdf_mappings as $rdf_mapping) {
    rdf_mapping_save($rdf_mapping);
  }

  // Default "Basic page" to not be promoted and have comments disabled.
  variable_set('node_options_page', array('status'));
  variable_set('comment_page', COMMENT_NODE_HIDDEN);

  // Don't display date and author information for "Page" nodes by default.
  variable_set('node_submitted_page', FALSE);

  // Enable user picture support and set the default to a square thumbnail option.
  variable_set('user_pictures', '1');
  variable_set('user_picture_dimensions', '1024x1024');
  variable_set('user_picture_file_size', '800');
  variable_set('user_picture_style', 'thumbnail');

  // Create a default vocabulary named "Tags", enabled for the 'news' content type.
  $description = st('Use tags to group articles on similar topics into categories.');
  $vocabulary = (object) array(
    'name' => st('Tags'),
    'description' => $description,
    'machine_name' => 'tags',
  );
  taxonomy_vocabulary_save($vocabulary);

  $field = array(
    'field_name' => 'field_' . $vocabulary->machine_name,
    'type' => 'taxonomy_term_reference',
    
    // Set cardinality to unlimited for tagging.
    'cardinality' => FIELD_CARDINALITY_UNLIMITED,
    'settings' => array(
      'allowed_values' => array(
        array(
          'vocabulary' => $vocabulary->machine_name,
          'parent' => 0,
        ),
      ),
    ),
  );
  field_create_field($field);

  $help = st('Enter a comma-separated list of words to describe your content.');
  $instance = array(
    'field_name' => 'field_' . $vocabulary->machine_name,
    'entity_type' => 'node',
    'label' => 'Tags',
    'bundle' => 'news',
    'description' => $help,
    'widget' => array(
      'type' => 'taxonomy_autocomplete',
      'weight' => -4,
    ),
    'display' => array(
      'default' => array(
        'type' => 'taxonomy_term_reference_link',
        'weight' => 10,
      ),
      'teaser' => array(
        'type' => 'taxonomy_term_reference_link',
        'weight' => 10,
      ),
    ),
  );
  field_create_instance($instance);

  // Create an image field named "Image", enabled for the 'news' content type.
  // Many of the following values will be defaulted, they're included here as an illustrative examples.
  // See http://api.drupal.org/api/function/field_create_field/7

  $field = array(
    'field_name' => 'field_image',
    'type' => 'image',
    'cardinality' => 1,
    'locked' => FALSE,
    'indexes' => array('fid' => array('fid')),
    'settings' => array(
      'uri_scheme' => 'public',
      'default_image' => FALSE,
    ),
    'storage' => array(
      'type' => 'field_sql_storage',
      'settings' => array(),
    ),
  );
  field_create_field($field);

  // Many of the following values will be defaulted, they're included here as an illustrative examples.
  // See http://api.drupal.org/api/function/field_create_instance/7
  $instance = array(
    'field_name' => 'field_image',
    'entity_type' => 'node',
    'label' => 'Image',
    'bundle' => 'news',
    'description' => st('Upload an image to go with this news article.'),
    'required' => FALSE,
    'settings' => array(
      'file_directory' => 'field/image',
      'file_extensions' => 'png gif jpg jpeg',
      'max_filesize' => '',
      'max_resolution' => '',
      'min_resolution' => '',
      'alt_field' => TRUE,
      'title_field' => '',
    ),
    'widget' => array(
      'type' => 'image_image',
      'settings' => array(
        'progress_indicator' => 'throbber',
        'preview_image_style' => 'thumbnail',
      ),
      'weight' => -1,
    ),
    'display' => array(
      'default' => array(
        'label' => 'hidden',
        'type' => 'image',
        'settings' => array(
          'image_style' => 'large',
          'image_link' => '',
        ),
        'weight' => -1,
      ),
      'teaser' => array(
        'label' => 'hidden',
        'type' => 'image',
        'settings' => array(
          'image_style' => 'medium',
          'image_link' => 'content',
        ),
        'weight' => -1,
      ),
    ),
  );
  field_create_instance($instance);

  // Enable default permissions for system roles.
  $filtered_html_permission = filter_permission_name($filtered_html_format);
  user_role_grant_permissions(DRUPAL_ANONYMOUS_RID, array('access content', 'access comments', $filtered_html_permission));
  user_role_grant_permissions(DRUPAL_AUTHENTICATED_RID, array('access content', 'access comments', 'post comments', 'skip comment approval', $filtered_html_permission));

  // Create a default role for site administrators, with all available permissions assigned.
  $admin_role = new stdClass();
  $admin_role->name = 'administrator';
  $admin_role->weight = 2;
  user_role_save($admin_role);
  user_role_grant_permissions($admin_role->rid, array_keys(module_invoke_all('permission')));
  // Set this as the administrator role.
  variable_set('user_admin_role', $admin_role->rid);

  // create additional user roles for governance
  $contrib_role = new stdClass();
  $contrib_role->name = 'content contributor';
  $contrib_role->weight = 3;
  user_role_save($contrib_role);
  $contrib_id = $contrib_role->rid;

  $editor_role = new stdClass();
  $editor_role->name = 'content editor';
  $editor_role->weight = 4;
  user_role_save($editor_role);
  $editor_id = $editor_role->rid;

  $owner_role = new stdClass();
  $owner_role->name = 'content owner';
  $owner_role->weight = 5;
  user_role_save($owner_role);
  $owner_id = $owner_role->rid;
/*  setting create/edit/delete or workbench workflow permissions results in a db warning message. The install goes through fine however.
  SQLSTATE[23000]: Integrity constraint violation: 1048 Column 'module' cannot be null*/
  $contrib_perms = array(
    'access administration menu',
    'access content',
    'view own unpublished content',
  );
/*    'create news content',
    'edit own news content',
    'create page content',
    'edit own page content',*/
  $editor_perms = array(
    'access administration menu',
    'access content',
    'view own unpublished content',
  );
/*    'edit any news content',
    'edit any page content',
    'moderate content from draft to needs_review',
    'moderate content from needs_review to draft',*/
  $owner_perms = array(
    'access administration menu',
    'access content',
    'administer beans',
    'access bean overview',
    'view own unpublished content',
  );
/*    'view content revisions',
    'edit any news content',
    'delete any news content',
    'edit any page content',
    'delete any page content',
    'moderate content from needs_review to draft',
    'moderate content from needs_review to published',*/

  user_role_grant_permissions($contrib_id, $contrib_perms);
  user_role_grant_permissions($editor_id, $editor_perms);
  user_role_grant_permissions($owner_id, $owner_perms);

  // Assign user 1 the "administrator" role.
  db_insert('users_roles')
    ->fields(array('uid' => 1, 'rid' => $admin_role->rid))
    ->execute();
  $string  = "<p>Welcome to the VisionPoint Drupal Starterkit.</p>";
  $string .= "<p>We've installed and enabled a handful of <a href='admin/modules' target='_blank'>modules</a>, as well as provided an <a href='admin/appearance/settings/starterkit' target='_blank'>Omega 4 Subtheme</a> with pre-styled layouts.</p>";
  $string .= "<p>You'll eventually want to delete this sample content and set up Your homepage content per the IA and design requirements.</p>";
  //create first node
  $date = new DateTime();
  $node = new stdClass();
  $node->type = 'page';
  $node->status = 1;
  $node->uid = 1;
  $node->title = 'Home';
  $node->promote = 1;
  $node->created = $date->getTimestamp();
  $node->timestamp = $date->getTimestamp();
  $node->sticky = 0;
  $node->format = 3;
  $node->language = LANGUAGE_NONE;
  $node->teaser = '';
  $node->revision = 0;
  node_object_prepare($node);
  $node->intro[$node->language][0]['value'] = 'introtext index';
  $node->body[$node->language][0] = array(
      'value' => $string,
      'summary' => '',
      'format' => 'filtered_html',
      'safe_value' => 'Body text test'
  );
  node_save($node);

  variable_set('site_frontpage','node/1');
  variable_set('node_admin_theme', 1);

  node_access_rebuild();

  drupal_flush_all_caches();
}


  // Enable default settings for jquery_update
/*  variable_set('jquery_update_compression_type', 'min');
  variable_set('jquery_update_jquery_admin_version', '1.7');
  variable_set('jquery_update_jquery_version', '1.8');*/



/*
  if (drupal_write_record('block_custom', $footer_block_text)) {
    $footer_block = array(
      'module' => 'block',
      'delta' => $footer_block_text['bid'],
      'theme' => 'pisces',
      'visibility' => 0,
      'region' => 'footer',
      'status' => 1,
      'pages' => 0,
      'weight' => 1,
      'title' => variable_get('site_name', 'Conference Organizing Distribution'),
    );
    drupal_write_record('block', $footer_block);
  }
*/
?>
